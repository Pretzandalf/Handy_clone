name: Test

on:
  pull_request:
    branches: [ "master" ]
    types: [ opened, reopened, ready_for_review, synchronize ]

  workflow_dispatch:

jobs:
  extract-image:
    name: Extraction of configs
    runs-on: ubuntu-latest
    outputs:
      image-url: ${{ steps.extractor.outputs.image_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract image URL
        id: extractor
        run: |
          IMAGE_URL=$(grep -o 'image:\s*[^ ]*' docker-compose.yaml | cut -d ' ' -f2)
          echo "image_url=$IMAGE_URL" >> $GITHUB_OUTPUT
          echo $IMAGE_URL

  build-and-check:
    name: Building, testing, linting
    needs: extract-image
    runs-on: self-hosted
    env:
      CMAKE_ARGS: "-DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DCMAKE_TOOLS_ADDRESS_SANITIZER=1"

    container:
      image: ${{ needs.extract-image.outputs.image-url}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build ROS2 packages
        shell: bash
        run: |
          source $ROS_ROOT/setup.bash
          cd $GITHUB_WORKSPACE/packages
          mkdir -p camera/params
          colcon build --merge-install --cmake-args $CMAKE_ARGS
          source install/setup.bash

      - name: Test ROS2 packages
        shell: bash
        run: |
          cd $GITHUB_WORKSPACE/packages
          colcon test --ctest-args tests --merge-install --executor parallel --parallel-workers $(nproc) --return-code-on-test-failure

      - name: Fetch PR base branch
        shell: bash
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
          git fetch origin ${{ github.event.pull_request.base.ref }}:${{ github.event.pull_request.base.ref }}

      - name: Lint files
        uses: pre-commit/action@v3.0.1
        with:
          extra_args: clang-tidy --all-files
